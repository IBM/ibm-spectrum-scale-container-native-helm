apiVersion: csi.ibm.com/v1
kind: "CSIScaleOperator"
metadata:
  name: "ibm-spectrum-scale-csi"
  namespace: {{ .Values.csiNamespace | default .Release.Namespace }}
  labels:
    helm.sh/chart: {{ include "ibm-spectrum-scale-csi.chart" . }}
    app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
    release: ibm-spectrum-scale-csi-operator
status: {}
spec:
# A passthrough option that distributes an imagePullSecrets array to the containers
# generated by the csi scale operator. Please refer to official k8s documentation for
# your environment for more details. https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# ==================================================================================
  {{- if .Values.csiImagePullSecrets }}
  imagePullSecrets:
    {{- toYaml .Values.csiImagePullSecrets | nindent 4 }}
  {{- end }}

# Below specifies the details of a SpectrumScale cluster configuration used by the
# plugin. It can have multiple values.
# ==================================================================================
  clusters:
    - id: "{{ .Values.primaryCluster.local.clusterId }}"
      secrets: "{{ .Values.primaryCluster.local.secret }}"
      secureSslMode: {{ .Values.primaryCluster.local.secureSslMode }}
      {{- if .Values.primaryCluster.local.cacert }}      
      cacert:  "{{ .Values.primaryCluster.local.cacert }}"
      {{- end }}
      restApi:
        - guiHost: "{{ .Values.primaryCluster.local.guiHost }}"
      primary:
        primaryFs: "{{ .Values.primaryFilesystem.name | default .Values.primaryCluster.primaryFs }}"
        {{- if .Values.primaryCluster.primaryFset }}
        primaryFset: "{{ .Values.primaryCluster.primaryFset }}"
        {{- end }}
        {{- if .Values.primaryCluster.primaryFsetInodeLimit }}
        inodeLimit: "{{ .Values.primaryCluster.primaryFsetInodeLimit }}"
        {{- end }}
        {{- if .Values.primaryCluster.remote.clusterId }}
        remoteCluster: "{{ .Values.primaryCluster.remote.clusterId }}"            
        {{- end }}
    {{- if .Values.primaryCluster.remote.clusterId }}
    - id: "{{ .Values.primaryCluster.remote.clusterId }}"
      secrets: "{{ .Values.primaryCluster.remote.secret }}"
      secureSslMode: {{ .Values.primaryCluster.remote.secureSslMode }}
      {{- if .Values.primaryCluster.remote.cacert }}
      cacert:  "{{ .Values.primaryCluster.remote.cacert }}"
      {{- end }}
      restApi:
        - guiHost: "{{ .Values.primaryRemoteStorageCluster.gui.host | default .Values.primaryCluster.remote.guiHost }}"
    {{- end }}
    {{- if .Values.addlRemoteClusters }}
      {{- toYaml .Values.addlRemoteClusters | nindent 4 }}
    {{- end }}

# Attacher image name, in case we do not want to use default image.
# ==================================================================================
#  attacher: "us.gcr.io/k8s-artifacts-prod/sig-storage/csi-attacher:v3.1.0"
{{- if .Values.csiAttacher.image.name }}
  attacher: "{{ .Values.csiAttacher.image.name }}"
{{- end }}

# Provisioner image name, in case we do not want to use default image.
# ==================================================================================
#  provisioner: "us.gcr.io/k8s-artifacts-prod/sig-storage/csi-provisioner:v2.1.0"
{{- if .Values.csiProvisioner.image.name }}
  provisioner: "{{ .Values.csiProvisioner.image.name }}"
{{- end }}

# Driver Registrar image name, in case we do not want to use default image.
# ==================================================================================
#  driverRegistrar: "us.gcr.io/k8s-artifacts-prod/sig-storage/csi-node-driver-registrar:v2.1.0"
{{- if .Values.csiDriverRegistrar.image.name }}
  driverRegistrar: "{{ .Values.csiDriverRegistrar.image.name }}"
{{- end }}

# Snapshotter image name, in case we do not want to use default image.
# ==================================================================================
#  snapshotter: "us.gcr.io/k8s-artifacts-prod/sig-storage/csi-snapshotter:v4.0.0"
{{- if .Values.csiSnapshotter.image.name }}
  snapshotter: "{{ .Values.csiSnapshotter.image.name }}"
{{- end }}

# SpectrumScale CSI Plugin/Driver image name, in case we do not want to use default image.
# ==================================================================================
#  spectrumScale: "quay.io/ibm-spectrum-scale/ibm-spectrum-scale-csi-driver:v2.2.0"
{{- if .Values.csiDriver.image.name }}
  spectrumScale: "{{ .Values.csiDriver.image.name }}"
{{- end }}

# attacherNodeSelector specifies on which nodes we want to run attacher sidecar
# In below example attacher will run on nodes which have label as "scale=true"
# and "infranode=2". Can have multiple entries.
# ==================================================================================
  attacherNodeSelector:
    - key: "{{ .Values.csiNodeSelectorBase.key }}"
      value: "{{ .Values.csiNodeSelectorBase.value }}"
  {{- if .Values.csiNodeSelectorAttacher.key }}
    - key: "{{ .Values.csiNodeSelectorAttacher.key }}"
      value: "{{ .Values.csiNodeSelectorAttacher.value }}"
  {{- end }}

# provisionerNodeSelector specifies on which nodes we want to run provisioner
# sidecar. In below example provisioner will run on nodes which have label as
# "scale=true" and "infranode=1". Can have multiple entries.
# ==================================================================================
  provisionerNodeSelector:
    - key: "{{ .Values.csiNodeSelectorBase.key }}"
      value: "{{ .Values.csiNodeSelectorBase.value }}"
  {{- if .Values.csiNodeSelectorProvisioner.key }}
    - key: "{{ .Values.csiNodeSelectorProvisioner.key }}"
      value: "{{ .Values.csiNodeSelectorProvisioner.value }}"
  {{- end }}

# snapshotterNodeSelector specifies on which nodes we want to run snapshotter
# sidecar. In below example snapshotter pod will run on nodes which have label as
# "scale=true" and "infranode=1". Can have multiple entries.
# ==================================================================================
  snapshotterNodeSelector:
    - key: "{{ .Values.csiNodeSelectorBase.key }}"
      value: "{{ .Values.csiNodeSelectorBase.value }}"
  {{- if .Values.csiNodeSelectorSnapshotter.key }}
    - key: "{{ .Values.csiNodeSelectorSnapshotter.key }}"
      value: "{{ .Values.csiNodeSelectorSnapshotter.value }}"
  {{- end }}

# pluginNodeSelector specifies nodes on which we want to run plugin daemoset
# In below example plugin daemonset will run on nodes which have label as
# "scale=true". Can have multiple entries.
# ==================================================================================
  pluginNodeSelector:
    - key: "{{ .Values.csiNodeSelectorBase.key }}"
      value: "{{ .Values.csiNodeSelectorBase.value }}"

# In case K8s nodes name differs from SpectrumScale nodes name, we can provide
# node mapping using nodeMapping attribute. Can have multiple entries.
# ==================================================================================
#  nodeMapping:
#    - k8sNode: "< K8s Node Name >"
#      spectrumscaleNode: "< SpectrumScale Node Name >"
# In case K8s node name start with number then use following node mapping format.
#    - k8sNode: "K8sNodePrefix_< K8s Node Name >"
#      spectrumscaleNode: "< SpectrumScale Node Name >"
{{- if .Values.csiNodeMapping }}
  nodeMapping:
    {{- toYaml .Values.csiNodeMapping | nindent 4 }}
{{- end }}

# Array of tolerations that will be distribued to CSI pods. Please refer to official
# k8s documentation for your environment for more details.
# https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
# ==================================================================================
#  tolerations:
#    - key: "key1"
#      operator: "Equal"
#      value: "value1"
#      effect: "NoExecute"
#      tolerationSeconds: 3600
{{- if .Values.csiTolerations }}
  tolerations:
    {{- toYaml .Values.csiTolerations | nindent 4 }}
{{- end }}

# Kubelet root directory path, in case we don't want to use the default kubelet
# root directory path.
# ==================================================================================
#  kubeletRootDirPath: "/var/lib/kubelet"
{{- if .Values.csiKubeletRootDirPath }}
  kubeletRootDirPath: "{{ .Values.csiKubeletRootDirPath }}"
{{- end }}
